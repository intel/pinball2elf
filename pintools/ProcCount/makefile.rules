##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

PIN_ROOT?=$(shell pwd | sed '/extras.*/s///g')

OPT?=-O2
OBJEXT = o
OBJDIR=obj-$(TARGET)
PINTOOL_PREFIX=$(OBJDIR)/

CXXFLAGS = -faligned-new -D_FILE_OFFSET_BITS=64 -I$(PIN_ROOT)/source/tools/InstLib 

CXXFLAGS += ${WARNINGS} $(DBG) $(OPT) ${DEPENDENCYFLAG} 

TOOLNAMES= proccount

TOOLS=${TOOLNAMES:%=$(PINTOOL_PREFIX)%$(PINTOOL_SUFFIX)}


# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := ${TOOL_NAMES} 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := 

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
all: myinstall

myinstall: 
	$(MAKE) tools 
	rm -f *.o

tools: $(TOOLS) 
## build rules

$(OBJDIR)/%.${OBJEXT}: %.cpp
	$(CXX) ${MYDEFINES} ${COPT} $(CXXFLAGS) $(TOOL_INCLUDES) $(TOOL_CXXFLAGS) $(PIN_CXXFLAGS) ${COMP_OBJ}$@ $<

#$(PINTOOL_PREFIX) proccount$(PINTOOL_SUFFIX):  proccount.${OBJEXT}    $(PINPLAY_LIB_HOME)/libpinplay.a  $(EXT_LIB_HOME)/libbz2.a $(EXT_LIB_HOME)/libzlib.a  $(CONTROLLERLIB) 
$(PINTOOL_PREFIX)proccount$(PINTOOL_SUFFIX):  $(OBJDIR)/proccount.${OBJEXT} #$(CONTROLLERLIB) 
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) $(MYLIBS) $(EXTRA_LIBS) $(PIN_LIBS) $(DBG)  
	@echo ""
	@echo "*********************************"
	@echo ""

## cleaning
instclean: 
	-rm -r -f *.${OBJEXT}  *.out *.d pin.log obj-* $(PIN_ROOT)/source/tools/InstLib/obj-*
localclean: 
	-rm -r -f *.${OBJEXT} pin.log obj-* $(PIN_ROOT)/source/tools/InstLib/obj-*

# See makefile.default.rules for the default build rules.
